<div class="container">
  <div class="row">
    <div class="twelve columns">
      <p>
        This page is a bit of a work in progress.
        If there is any other information you would like to see on this page,
        feel free to email us suggestions at
        <%= mail_to "plantiapp@gmail.com", "plantiapp@gmail.com" ,subject: "Feature Suggestion:" %>
      </p>
    </div>
  </div>

  <div class="row">
    <div class="six columns">
      <div id="user-info">
        <div><h3>Hello, <%= @user.name %>.</h3></div>
        <div>You currently have <%= plant_count %>.</div>
      </div>
    </div>

    <div class="six columns">
      <h2>Push Simple</h2>

      <p>
        <strong>Objective</strong>: Simple example of the Web Push API through Service Workers. Send notifications to users even when the page is not open.<br/>
        Eventually this will be used to trigger plant watering notifications.
      </p>

      <button id="push-simple-app" class="button">Send notification</button>
      <button id="subscribe" class="button">Subscribe to notifications</button>
      <button id="unsubscribe" class="button">Unsubscribe from notifications</button>
    </div>
  </div>

  <div class="row">
    <%= link_to 'Edit Account', edit_registration_path(@user), class: "button" %>
  </div>

  <script type="text/javascript">
    window.vapidPublicKey = new Uint8Array(<%= Base64.urlsafe_decode64(ENV['VAPID_PUBLIC_KEY']).bytes %>);

    $('#subscribe').on('click', (e) => {
      console.log('attempting subscription...')
      navigator.serviceWorker.ready
        .then((serviceWorkerRegistration) => {
          serviceWorkerRegistration.pushManager.getSubscription()
            .then((subscription) => {
              new Promise((resolve, reject) => {
                if (subscription === null) {
                  console.log("subscription null")
                  serviceWorkerRegistration.pushManager
                  .subscribe({
                    userVisibleOnly: true,
                    applicationServerKey: window.vapidPublicKey
                  })
                  .then((subscription) => resolve(subscription));
                }
              })
              .then(() => {
                console.log("then")
                $.post('/subscribe', {
                  subscription: subscription.toJSON(),
                  user_id: <%= @user.id %>
                })
                .done((data, status) => {
                  console.log(data, status)
                  $('#subscribe').text('Subscribed!');
                  console.log("Subscribed!")
                })
              })
              .catch(error => {
                console.warn("there was an error:", error)
              })
            })
        });
    });
    $('#unsubscribe').on('click', (e) => {
      console.log('attempting to unsubscribe...')
      navigator.serviceWorker.ready
        .then((serviceWorkerRegistration) => {
          serviceWorkerRegistration.pushManager.getSubscription()
            .then((subscription) => {
              $.ajax('/unsubscribe', {
                type: 'DELETE',
                data: {
                  subscription: subscription.toJSON(),
                  user_id: <%= @user.id %>
                }
              })
              .done(function(data, status) {
                subscription.unsubscribe()
                console.log(data, status)
                $('#unsubscribe').text('Unsubscribed!');
                console.log("Unsubscribed!")
              })
            });
        });
    });
  </script>
</div>